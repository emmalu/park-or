import{s as p,a as d}from"./Error-4ed679d7.js";import{t as _}from"./typedArrayUtil-d02f10a8.js";import{u}from"./aaBoundingRect-ca34962d.js";import{c}from"./Polyline-42dcc920.js";import{v as y,n as f}from"./timeSupport-b2e00cf8.js";import{J as w}from"./utils-2be9b16b.js";import{x as I}from"./Query-066f2ccf.js";import{u as b}from"./FeatureStore2D-c33240d2.js";import{_ as T}from"./preload-helper-101896b7.js";import"./string-9c5e03f7.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./Extent-d5fff12d.js";import"./cast-6d78d3c7.js";import"./ensureType-d98e08e1.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-930cba29.js";import"./jsonUtils-5115c7e5.js";import"./featureConversionUtils-d9ec654e.js";import"./OptimizedFeature-1bba65b5.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./projectionSupport-38cc9dc5.js";import"./projection-6146477c.js";import"./unitUtils-b69647a1.js";import"./jsonMap-5afaf2ff.js";import"./SimpleObservable-e0897cc6.js";import"./mat4-62d5e6a4.js";import"./assets-6ba3cd63.js";import"./request-e4299080.js";import"./zscale-72b4355d.js";import"./json-48e3ea08.js";import"./normalizeUtils-91a64c2b.js";import"./geometry-70b2a4a5.js";import"./typeUtils-b6c52390.js";import"./TimeExtent-0fd238ea.js";import"./enumeration-497ef064.js";import"./Field-bb784640.js";import"./fieldType-9bddd3d4.js";import"./Clonable-58355d3c.js";import"./CircularArray-ace048ef.js";import"./Evented-b378ccab.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./aaBoundingBox-33fc923c.js";import"./diffUtils-713e5c9b.js";import"./Collection-42fe629f.js";import"./arcadeOnDemand-72c57f7a.js";import"./FeatureSetReader-9e0a2b1d.js";import"./centroid-7800ee74.js";const l=p.getLogger("esri.views.2d.layers.features.support.whereUtils"),g={getAttribute:(s,t)=>s.field(t)};async function v(s,t){const e=await T(()=>import("./WhereClause-646ca60e.js"),["assets/WhereClause-646ca60e.js","assets/string-9c5e03f7.js","assets/typedArrayUtil-d02f10a8.js"]);try{const i=e.WhereClause.create(s,t);if(!i.isStandardized){const r=new d("mapview - bad input","Unable to apply filter's definition expression, as expression is not standardized.",i);l.error(r)}return r=>{const h=r.readArcadeFeature();return i.testFeature(h,g)}}catch{return l.warn("mapview-bad-where-clause","Encountered an error when evaluating where clause",s),r=>!0}}const a=1,E=2;class bt{constructor(t){this._geometryBounds=u(),this._idToVisibility=new Map,this._serviceInfo=t}get hash(){return this._hash}check(t){return this._applyFilter(t)}clear(){const t=this._resetAllHiddenIds();return this.update(),{show:t,hide:[]}}invalidate(){this._idToVisibility.forEach((t,e)=>{this._idToVisibility.set(e,0)})}setKnownIds(t){for(const e of t)this._idToVisibility.set(e,a)}setTrue(t){const e=[],i=[],r=new Set(t);return this._idToVisibility.forEach((h,o)=>{const m=!!(this._idToVisibility.get(o)&a),n=r.has(o);!m&&n?e.push(o):m&&!n&&i.push(o),this._idToVisibility.set(o,n?a|E:0)}),{show:e,hide:i}}createQuery(){const{geometry:t,spatialRel:e,where:i,timeExtent:r,objectIds:h}=this;return I.fromJSON({geometry:t,spatialRel:e,where:i,timeExtent:r,objectIds:h})}async update(t,e){this._hash=JSON.stringify(t);const i=await w(t,null,e);await Promise.all([this._setGeometryFilter(i),this._setIdFilter(i),this._setAttributeFilter(i),this._setTimeFilter(i)])}async _setAttributeFilter(t){if(!t||!t.where)return this._clause=null,void(this.where=null);this._clause=await v(t.where,this._serviceInfo.fieldsIndex),this.where=t.where}_setIdFilter(t){this._idsToShow=t&&t.objectIds&&new Set(t.objectIds),this._idsToHide=t&&t.hiddenIds&&new Set(t.hiddenIds),this.objectIds=t&&t.objectIds}async _setGeometryFilter(t){if(!t||!t.geometry)return this._spatialQueryOperator=null,this.geometry=null,void(this.spatialRel=null);const e=t.geometry,i=t.spatialRel||"esriSpatialRelIntersects",r=await y(i,e,this._serviceInfo.geometryType,this._serviceInfo.hasZ,this._serviceInfo.hasM);c(this._geometryBounds,e),this._spatialQueryOperator=r,this.geometry=e,this.spatialRel=i}_setTimeFilter(t){if(this.timeExtent=this._timeOperator=null,t&&t.timeExtent)if(this._serviceInfo.timeInfo)this.timeExtent=t.timeExtent,this._timeOperator=f(this._serviceInfo.timeInfo,t.timeExtent,b);else{const e=new d("feature-layer-view:time-filter-not-available","Unable to apply time filter, as layer doesn't have time metadata.",t.timeExtent);p.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter").error(e)}}_applyFilter(t){return this._filterByGeometry(t)&&this._filterById(t)&&this._filterByTime(t)&&this._filterByExpression(t)}_filterByExpression(t){return!this.where||this._clause(t)}_filterById(t){return(!this._idsToHide||!this._idsToHide.size||!this._idsToHide.has(t.getObjectId()))&&(!this._idsToShow||!this._idsToShow.size||this._idsToShow.has(t.getObjectId()))}_filterByGeometry(t){if(!this.geometry)return!0;const e=t.readHydratedGeometry();return!!e&&this._spatialQueryOperator(e)}_filterByTime(t){return!!_(this._timeOperator)||this._timeOperator(t)}_resetAllHiddenIds(){const t=[];return this._idToVisibility.forEach((e,i)=>{e&a||(this._idToVisibility.set(i,a),t.push(i))}),t}}export{bt as default};
