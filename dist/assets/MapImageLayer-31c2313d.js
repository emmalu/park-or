import{C as b,w as f,e as o,y as p,n as S}from"./cast-6d78d3c7.js";import{U as g}from"./request-e4299080.js";import{T as w}from"./TimeExtent-0fd238ea.js";import{a as v}from"./Error-4ed679d7.js";import{a as I}from"./HandleOwner-6ac6f00a.js";import{n as $}from"./loadAll-1ae88564.js";import{r as O}from"./typedArrayUtil-d02f10a8.js";import{O as E}from"./MultiOriginJSONSupport-1970ed0f.js";import{w as T,j as M}from"./promiseUtils-930cba29.js";import{T as L}from"./ensureType-d98e08e1.js";import{a as P,o as j,r as N}from"./Extent-d5fff12d.js";import{i as R}from"./scaleUtils-a6834d30.js";import{b as U}from"./Layer-739799ab.js";import{i as F}from"./APIKeyMixin-f90cfebd.js";import{E as J,y as q,z as A}from"./SublayersOwner-335fda3a.js";import{p as k}from"./ArcGISService-f6f32fbc.js";import{n as _}from"./BlendLayer-7a735871.js";import{o as z}from"./CustomParametersMixin-5e3018da.js";import{c as V,f as B}from"./OperationalLayer-54654858.js";import{v as C}from"./PortalLayer-644d657e.js";import{p as D}from"./RefreshableLayer-84ec1468.js";import{t as G}from"./ScaleRangeLayer-c6a35aba.js";import{a as H}from"./TemporalLayer-d41a81db.js";import{c as K}from"./ExportImageParameters-322c872d.js";import{n as x}from"./sublayerUtils-5b8ae1f1.js";import{e as W}from"./versionUtils-5ccafbea.js";import"./string-9c5e03f7.js";import"./nextTick-3ee5a785.js";import"./preload-helper-101896b7.js";import"./reactiveUtils-b0e56010.js";import"./asyncUtils-18831bb1.js";import"./Collection-42fe629f.js";import"./Evented-b378ccab.js";import"./SimpleObservable-e0897cc6.js";import"./Loadable-b0d5bb7e.js";import"./Promise-6bd0b483.js";import"./unitUtils-b69647a1.js";import"./jsonMap-5afaf2ff.js";import"./geometry-70b2a4a5.js";import"./Polyline-42dcc920.js";import"./typeUtils-b6c52390.js";import"./Identifiable-57df9761.js";import"./Version-b7a28587.js";import"./CollectionFlattener-b89887c0.js";import"./PopupTemplate-d6e0b369.js";import"./Clonable-58355d3c.js";import"./fieldUtils-141b2ff2.js";import"./arcadeOnDemand-72c57f7a.js";import"./enumeration-497ef064.js";import"./number-c7f1bfee.js";import"./locale-30120714.js";import"./UniqueValueRenderer-cd716182.js";import"./symbols-64db5dd6.js";import"./CIMSymbol-a95ceb49.js";import"./Symbol-1bb07043.js";import"./Color-b7b9e6bb.js";import"./colorUtils-639f4d25.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-8b7acc4e.js";import"./aaBoundingBox-33fc923c.js";import"./persistableUrlUtils-d18becd9.js";import"./collectionUtils-3d8a9611.js";import"./Portal-fbb2b73d.js";import"./PortalGroup-813428fa.js";import"./PortalUser-cf18ae9d.js";import"./LegendOptions-e31ff575.js";import"./diffUtils-713e5c9b.js";import"./colorRamps-c00f504b.js";import"./sizeVariableUtils-d4870b0d.js";import"./Graphic-e4fb7090.js";import"./jsonUtils-5115c7e5.js";import"./compilerUtils-eefea0ec.js";import"./lengthUtils-0dde2114.js";import"./jsonUtils-b1b224a3.js";import"./styleUtils-0c73f570.js";import"./jsonUtils-c5ba7295.js";import"./DictionaryLoader-29adda53.js";import"./LRUCache-4d56ba4d.js";import"./MemCache-1e028041.js";import"./deprecate-46fadabd.js";import"./heatmapUtils-90a13d85.js";import"./vec4f64-018b3fa6.js";import"./LayerFloorInfo-0d02c503.js";import"./arcgisLayerUrl-02fe1a62.js";import"./FeatureType-6c50f4e3.js";import"./Field-bb784640.js";import"./fieldType-9bddd3d4.js";import"./FeatureTemplate-773a8865.js";import"./FieldsIndex-c06d221a.js";import"./labelingInfo-681dda19.js";import"./labelUtils-87bb22ff.js";import"./defaultsJSON-b087dd4d.js";import"./Query-066f2ccf.js";import"./popupUtils-ea7b7951.js";import"./parser-f68dd732.js";import"./mat4-62d5e6a4.js";import"./ElevationInfo-28459ff1.js";import"./PortalItem-69c4a143.js";import"./assets-6ba3cd63.js";import"./TimeInfo-a1791ae0.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends _(H(G(J(q(k(V(C(E(D(F(z(I(U))))))))))))){constructor(...t){super(...t),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=O(t)?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch(T).then(()=>this._fetchService(e))),Promise.resolve(this)}readImageFormat(t,e){const m=e.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(t,e,m,r){if(!this.loaded||!t)return;const a=t.slice().reverse().flatten(({sublayers:s})=>s&&s.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const s=b(r.origin);if(s===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=x(a,c,f.SERVICE)}else if(s>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=x(a,c.sublayers,b(c.origin))}}const l=[],y={writeSublayerStructure:n,...r};let h=n;a.forEach(s=>{const c=s.write({},y);l.push(c),h=h||s.originOf("visible")==="user"}),l.some(s=>Object.keys(s).length>1)&&(e.layers=l),h&&(e.visibleLayers=a.filter(s=>s.visible).map(s=>s.id))}createExportImageParameters(t,e,m,r){const a=r&&r.pixelRatio||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian());const n=new K({layer:this,floors:r==null?void 0:r.floors,scale:R({extent:t,width:e})*a}),l=n.toJSON();n.destroy();const y=!r||!r.rotation||this.version<10.3?{}:{rotation:-r.rotation},h=t&&t.spatialReference,s=h.wkid||JSON.stringify(h.toJSON());l.dpi*=a;const c={};if(r!=null&&r.timeExtent){const{start:u,end:d}=r.timeExtent.toJSON();c.time=u&&d&&u===d?""+u:`${u??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:t&&t.xmin+","+t.ymin+","+t.xmax+","+t.ymax,bboxSR:s,imageSR:s,size:e+","+m,...l,...y,...c}}async fetchImage(t,e,m,r){return this._fetchImage("image",t,e,m,r)}async fetchImageBitmap(t,e,m,r){const a=await this._fetchImage("blob",t,e,m,r);return createImageBitmap(a)}async fetchRecomputedExtents(t={}){const e={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,e),{extent:r,fullExtent:a,timeExtent:n}=m,l=r||a;return{fullExtent:l&&P.fromJSON(l),timeExtent:n&&w.fromJSON({start:n[0],end:n[1]})}}loadAll(){return $(this,t=>{t(this.allSublayers)})}serviceSupportsSpatialReference(t){return W(this,t)}async _fetchImage(t,e,m,r,a){const n={responseType:t,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,m,r,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(n.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers)throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:y}=await g(l,n);return y}catch(y){throw M(y)?y:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:y})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:e,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=e,this.read(e,{origin:"service",url:this.parsedUrl})}};o([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([p()],i.prototype,"dpi",void 0),o([p()],i.prototype,"gdbVersion",void 0),o([p()],i.prototype,"imageFormat",void 0),o([j("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([p()],i.prototype,"imageTransparency",void 0),o([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([p()],i.prototype,"sourceJSON",void 0),o([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([N("sublayers",{layers:{type:[A]},visibleLayers:{type:[L]}})],i.prototype,"writeSublayers",null),o([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([p(B)],i.prototype,"url",void 0),i=o([S("esri.layers.MapImageLayer")],i);const Dr=i;export{Dr as default};
